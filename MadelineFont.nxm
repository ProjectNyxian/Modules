//
// MadelineFont.nx
//
// Created by Anonym on 23.03.25
//
 
include("ui");
include("GridParser");

let display = null;

function setTarget(target)
{
	display = target;
}

// character index
const Color = 0;

const Char_NA = [
	[3, 0, 7],
]
const Char_PT = [
	[0, 6, Color],
]
const Char_A = GridParser.parse(`
 ##
#  #
####
#  #
#  #
`, Color);
const Char_B = GridParser.parse(`
###
#  #
###
#  #
###
`, Color);
const Char_C = GridParser.parse(`
 ##
#
#
#
 ##
`, Color);
const Char_D = GridParser.parse(`
###
#  #
#  #
#  #
###
`, Color);
const Char_E = GridParser.parse(`
###
#
##
#
###
`, Color);
const Char_F = GridParser.parse(`
###
#
###
#
#
`, Color);
const Char_G = GridParser.parse(`
 ###
#
# ##
#  #
 ###
`, Color);
const Char_H = GridParser.parse(`
#  #
#  #
####
#  #
#  #
`, Color);
const Char_I = GridParser.parse(`
###
 #
 #
 #
###
`, Color);
const Char_J = GridParser.parse(`
 ###
   #
   #
#  #
 ##
`, Color);
const Char_K = GridParser.parse(`
#  #
# #
##
# #
#  #
`, Color);
const Char_L = GridParser.parse(`
#
#
#
#
###
`, Color);
const Char_M = GridParser.parse(`
#   #
## ##
# # #
#   #
#   #
`, Color);
const Char_N = GridParser.parse(`
#  #
## #
# ##
#  #
#  #
`, Color);
const Char_O = GridParser.parse(`
 ##
#  #
#  #
#  #
 ##
`, Color);
const Char_P = GridParser.parse(`
###
#  #
###
#
#
`, Color);
const Char_Q = GridParser.parse(`
 ##
#  #
#  #
#  #
 ##
   #
`, Color);
const Char_R = GridParser.parse(`
###
#  #
#  #
###
#  #
`, Color);
const Char_S = GridParser.parse(`
 ###
#
 ##
   #
###
`, Color);
const Char_T = GridParser.parse(`
###
 #
 #
 #
 #
`, Color);
const Char_U = GridParser.parse(`
#  #
#  #
#  #
#  #
 ##
`, Color);
const Char_V = GridParser.parse(`
#  #
#  #
# #
# #
 #
`, Color);
const Char_W = GridParser.parse(`
#   #
#   #
# # #
# # #
 # #
`, Color);
const Char_X = GridParser.parse(`
#  #
#  #
 ##
#  #
#  #
`, Color);
const Char_Y = GridParser.parse(`
#  #
#  #
 ###
   #
 ##
`, Color);
const Char_Z = GridParser.parse(`
###
  #
 #
#
###
`, Color);
const Char_a = GridParser.parse(`

 ###
#  #
#  #
 ###
`, Color);
const Char_b = GridParser.parse(`
#
###
#  #
#  #
###
`, Color);
const Char_c = GridParser.parse(`

 ##
#
#
 ##
`, Color);
const Char_d = GridParser.parse(`
   #
 ###
#  #
#  #
 ###
`, Color);
const Char_e = GridParser.parse(`

 ##
# ##
##
 ##
`, Color);
const Char_f = GridParser.parse(`
 ##
 #
###
 #
 #
`, Color);
const Char_g = GridParser.parse(`

 ###
#  #
#  #
 ###
   #
 ##
`, Color);
const Char_h = GridParser.parse(`
#
###
#  #
#  #
#  #
`, Color);
const Char_i = GridParser.parse(`
#

#
#
#
`, Color);
const Char_j = GridParser.parse(`
 #

 #
 #
 #
 #
#
`, Color);
const Char_k = GridParser.parse(`
#
#  #
# #
###
#  #
`, Color);
const Char_l = GridParser.parse(`
#
#
#
#
#
`, Color);
const Char_m = GridParser.parse(`

####
# # #
# # #
# # #
`, Color);
const Char_n = GridParser.parse(`

###
#  #
#  #
#  #
`, Color);
const Char_o= GridParser.parse(`

 ##
#  #
#  #
 ##
`, Color);
const Char_p = GridParser.parse(`

###
#  #
#  #
###
#
#
`, Color);
const Char_q = GridParser.parse(`

 ###
#  #
#  #
 ###
   #
   #
`, Color);
const Char_r = GridParser.parse(`

# #
##
#
#
`, Color);
const Char_s = GridParser.parse(`

 ###
##
  ##
###
`, Color);
const Char_t = GridParser.parse(`
 #
###
 #
 #
 ##
`, Color);
const Char_u = GridParser.parse(`

#  #
#  #
#  #
 ###
`, Color);
const Char_v = GridParser.parse(`

#  #
#  #
# #
 #
`, Color);
const Char_w = GridParser.parse(`

#   #
# # #
# # #
 # #
`, Color);
const Char_x = GridParser.parse(`

# #
 #
 #
# #
`, Color);
const Char_y = GridParser.parse(`

#  #
#  #
#  #
 ###
   #
###
`, Color);
const Char_z = GridParser.parse(`

####
  #
 #
####
`, Color);
const Char_0 = GridParser.parse(`
 ##
#  #
#  #
#  #
 ##
`, Color);
const Char_1 = GridParser.parse(`
 #
##
 #
 #
 #
`, Color);
const Char_2 = GridParser.parse(`
 ##
#  #
  #
 #
####
`, Color);
const Char_3 = GridParser.parse(`
###
   #
 ###
   #
###
`, Color);
const Char_4 = GridParser.parse(`
  #
 ##
# #
####
  #
`, Color);
const Char_5 = GridParser.parse(`
####
#
###
   #
###
`, Color);
const Char_6 = GridParser.parse(`
 ##
#
###
#  #
 ##
`, Color);
const Char_7 = GridParser.parse(`
####
   #
  #
 #
 #
`, Color);
const Char_8 = GridParser.parse(`
 ##
#  #
 ##
#  #
 ##
`, Color);
const Char_9 = GridParser.parse(`
 ##
#  #
 ###
   #
 ##
`, Color);
const Char_cash = GridParser.parse(`
 #
 ###
##
  ##
###
  #
`, Color);
const Char_euro = GridParser.parse(`
  ##
 #
###
 #
  ##
`, Color);
const Char_pound = GridParser.parse(`
  ##
 #
 ##
 #
####
`, Color);
const Char_yen = GridParser.parse(`
# #
# #
 #
###
 #
`, Color);
const Char_plus = GridParser.parse(`

 #
###
 #

`, Color);
const Char_minus = GridParser.parse(`


###


`, Color);
const Char_star = GridParser.parse(`
# #
 #
# #
`, Color);
const Char_slash = GridParser.parse(`
  #
  #
 #
#
#
`, Color);
const Char_divide = GridParser.parse(`
  #

#####

  #
`, Color);
const Char_equals = GridParser.parse(`

####

####

`, Color);
const Char_percent = GridParser.parse(`
# #
  #
 #
#
# #
`, Color);
const Char_quote = GridParser.parse(`
# #
# #
`, Color);
const Char_quote2 = GridParser.parse(`
#
#
`, Color);
const Char_hash = GridParser.parse(`
  # #
 # #
#####
 # #
# #
`, Color);
const Char_ed = GridParser.parse(`
  ####
 #    #
#  ## #
# # # #
#  ###
 #
  ####
`, Color);
const Char_and = GridParser.parse(`
 ##
#
 ## #
#  #
 ## #
`, Color);
const Char_underline = GridParser.parse(`




#####
`, Color);
const Char_brace_open = GridParser.parse(`
 #
#
#
#
#
 #
`, Color);
const Char_brace_close = GridParser.parse(`
#
 #
 #
 #
 #
#
`, Color);
const Char_commar = GridParser.parse(`




 #
#
`, Color);

// character pos
let col = 1;
let row = 0;

function setPos(nCol, nRow)
{
	col = nCol;
	row = nRow;
}

// helper
function maxY(grid) {
	let maxY = -Infinity;

	for (let i = 0; i < grid.length; i++) {
		let y = grid[i][1];
		if (y > maxY) {
			maxY = y;
		}
	}

	return maxY;
}

function maxX(grid) {
	let maxX = -Infinity;

	for (let i = 0; i < grid.length; i++) {
		let x = grid[i][0];
		if (x > maxX) {
			maxX = x;
		}
	}

	return maxX + 1;
}

// print
function draw(graph)
{
	let offsetA = maxX(graph);
	let offsetB = col + offsetA;
	if(offsetB > (width - 1))
	{
		row++;
		col = 1;
	}
	const ret = display.storeGraph(graph);
	display.drawGraph(ret, col, row * 8);
	display.redraw();
	display.unstoreGraph(ret);
	col += offsetA + 1;
}

function print(msg)
{
	let len = msg.length;
	for(let i = 0; i < len; i++)
	{
		switch(msg[i])
		{
			case "A":
				draw(Char_A);
				break;
			case "B":
				draw(Char_B);
				break;
			case "C":
				draw(Char_C);
				break;
			case "D":
				draw(Char_D);
				break;
			case "E":
				draw(Char_E);
				break;
			case "F":
				draw(Char_F);
				break;
			case "G":
				draw(Char_G);
				break;
			case "H":
				draw(Char_H);
				break;
			case "I":
				draw(Char_I);
				break;
			case "J":
				draw(Char_J);
				break;
			case "K":
				draw(Char_K);
				break;
			case "L":
				draw(Char_L);
				break;
			case "M":
				draw(Char_M);
				break;
			case "N":
				draw(Char_N);
				break;
			case "O":
				draw(Char_O);
				break;
			case "P":
				draw(Char_P);
				break;
			case "Q":
				draw(Char_Q);
				break;
			case "R":
				draw(Char_R);
				break;
			case "S":
				draw(Char_S);
				break;
			case "T":
				draw(Char_T);
				break;
			case "U":
				draw(Char_U);
				break;
			case "V":
				draw(Char_V);
				break;
			case "W":
				draw(Char_W);
				break;
			case "X":
				draw(Char_X);
				break;
			case "Y":
				draw(Char_Y);
				break;
			case "Z":
				draw(Char_Z);
				break;
			case "a":
				draw(Char_a);
				break;
			case "b":
				draw(Char_b);
				break;
			case "c":
				draw(Char_c);
				break;
			case "d":
				draw(Char_d);
				break;
			case "e":
				draw(Char_e);
				break;
			case "f":
				draw(Char_f);
				break;
			case "g":
				draw(Char_g);
				break;
			case "h":
				draw(Char_h);
				break;
			case "i":
				draw(Char_i);
				break;
			case "j":
				draw(Char_j);
				break;
			case "k":
				draw(Char_k);
				break;
			case "l":
				draw(Char_l);
				break;
			case "m":
				draw(Char_m);
				break;
			case "n":
				draw(Char_n);
				break;
			case "o":
				draw(Char_o);
				break;
			case "p":
				draw(Char_p);
				break;
			case "q":
				draw(Char_q);
				break;
			case "r":
				draw(Char_r);
				break;
			case "s":
				draw(Char_s);
				break;
			case "t":
				draw(Char_t);
				break;
			case "u":
				draw(Char_u);
				break;
			case "v":
				draw(Char_v);
				break;
			case "w":
				draw(Char_w);
				break;
			case "x":
				draw(Char_x);
				break;
			case "y":
				draw(Char_y);
				break;
			case "z":
				draw(Char_z);
				break;
			case "0":
				draw(Char_0);
				break;
			case "1":
				draw(Char_1);
				break;
			case "2":
				draw(Char_2);
				break;
			case "3":
				draw(Char_3);
				break;
			case "4":
				draw(Char_4);
				break;
			case "5":
				draw(Char_5);
				break;
			case "6":
				draw(Char_6);
				break;
			case "7":
				draw(Char_7);
				break;
			case "8":
				draw(Char_8);
				break;
			case "9":
				draw(Char_9);
				break;
			case "$":
				draw(Char_cash);
				break;
			case "€":
				draw(Char_euro);
				break;
			case "£":
				draw(Char_pound);
				break;
			case "¥":
				draw(Char_yen);
				break;
			case "+":
				draw(Char_plus);
				break;
			case "-":
				draw(Char_minus);
				break;
			case ".":
				draw(Char_dot);
				break;
			case "*":
				draw(Char_star);
				break;
			case "/":
				draw(Char_slash);
				break;
			case "=":
				draw(Char_equals);
				break;
			case "%":
				draw(Char_percent);
				break;
			case "\"":
				draw(Char_quote);
				break;
			case "'":
				draw(Char_quote2);
				break;
			case "#":
				draw(Char_hash);
				break;
			case "@":
				draw(Char_ed);
				break;
			case "&":
				draw(Char_and);
				break;
			case "_":
				draw(Char_underline);
				break;
			case "(":
				draw(Char_brace_open);
				break;
			case ")":
				draw(Char_brace_close);
				break;
			case ",":
				draw(Char_commar);
				break;
			case "\n":
				row++;
				col = 1;
				break;
			default:
				draw(Char_NA);
				break;
		}
	}
}

return {
	setTarget: setTarget,
	setPos: setPos,
	print: print
};